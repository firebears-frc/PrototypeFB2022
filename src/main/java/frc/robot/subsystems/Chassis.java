// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Chassis extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax frontLeftMotor;
private CANSparkMax rearLeftMotor;
private MotorControllerGroup leftMotors;
private CANSparkMax frontRightMotor;
private CANSparkMax rearRightMotor;
private MotorControllerGroup rightMotors;
private DifferentialDrive differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Chassis() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
frontLeftMotor = new CANSparkMax(2, MotorType.kBrushless);
 
 frontLeftMotor.restoreFactoryDefaults();  
frontLeftMotor.setInverted(false);
frontLeftMotor.setIdleMode(IdleMode.kCoast);
  

rearLeftMotor = new CANSparkMax(3, MotorType.kBrushless);
 
 rearLeftMotor.restoreFactoryDefaults();  
rearLeftMotor.setInverted(false);
rearLeftMotor.setIdleMode(IdleMode.kCoast);
  

leftMotors = new MotorControllerGroup(frontLeftMotor, rearLeftMotor  );
 addChild("leftMotors",leftMotors);
 

frontRightMotor = new CANSparkMax(4, MotorType.kBrushless);
 
 frontRightMotor.restoreFactoryDefaults();  
frontRightMotor.setInverted(false);
frontRightMotor.setIdleMode(IdleMode.kCoast);
  

rearRightMotor = new CANSparkMax(5, MotorType.kBrushless);
 
 rearRightMotor.restoreFactoryDefaults();  
rearRightMotor.setInverted(false);
rearRightMotor.setIdleMode(IdleMode.kCoast);
  

rightMotors = new MotorControllerGroup(frontRightMotor, rearRightMotor  );
 addChild("rightMotors",rightMotors);
 

differentialDrive = new DifferentialDrive(leftMotors, rightMotors);
 addChild("differentialDrive",differentialDrive);
 differentialDrive.setSafetyEnabled(true);
differentialDrive.setExpiration(0.1);
differentialDrive.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

